import { User } from "../models/user.model.js";
import { asyncHandler } from "../middlewares/asyncHandler.js";
import { signAccessToken, signRefreshToken } from "../utils/Jwt.js";
import jwt from "jsonwebtoken";

// ðŸ”¹ Register (No changes needed)
export const register = asyncHandler(async (req, res) => {
Â  const { username, email, password } = req.body;
Â  if (!username || !email || !password) {
Â  Â  return res
Â  Â  Â  .status(400)
Â  Â  Â  .json({ success: false, message: "All fields are required" });
Â  }

Â  const existingUser = await User.findOne({ email });
Â  if (existingUser) {
Â  Â  return res
Â  Â  Â  .status(400)
Â  Â  Â  .json({ success: false, message: "User already exists" });
Â  }

Â  const user = await User.create({ username, email, password });

Â  res.status(201).json({
Â  Â  success: true,
Â  Â  message: "User registered successfully",
Â  Â  user,
Â  });
});

// ðŸ”¹ Login
export const login = asyncHandler(async (req, res) => {
Â  const { email, password } = req.body;
Â  if (!email || !password) {
Â  Â  return res
Â  Â  Â  .status(400)
Â  Â  Â  .json({ success: false, message: "All fields are required" });
Â  }

Â  const user = await User.findOne({ email });
Â  if (!user) {
Â  Â  return res
Â  Â  Â  .status(400)
Â  Â  Â  .json({ success: false, message: "Invalid credentials" });
Â  }

Â  const isMatch = await user.comparePassword(password);
Â  if (!isMatch) {
Â  Â  return res
Â  Â  Â  .status(400)
Â  Â  Â  .json({ success: false, message: "Invalid credentials" });
Â  }

Â  const accessToken = signAccessToken(user._id);
Â  const refreshToken = signRefreshToken(user._id);

Â  // ðŸ”‘ Cookie configuration
Â  const isProduction = process.env.NODE_ENV === "production";

Â  res.cookie("refreshToken", refreshToken, {
Â  Â  httpOnly: true,
Â  Â  secure: isProduction,
Â  Â  // FIX: Use "None" (capital N) for production cross-site cookies
Â  Â  sameSite: isProduction ? "None" : "lax", 
Â  Â  maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
Â  Â  path: "/", // Explicitly set path
Â  });

Â  // Return user without password
Â  const { password: _, ...userWithoutPassword } = user.toObject();

Â  res.status(200).json({
Â  Â  success: true,
Â  Â  message: "Login successful",
Â  Â  accessToken,
Â  Â  user: userWithoutPassword,
Â  });
});

// ðŸ”¹ Refresh
export const refresh = asyncHandler(async (req, res) => {
Â  const token = req.cookies?.refreshToken;
Â  const isProduction = process.env.NODE_ENV === "production";
Â  
Â  // Define cookie options for consistency in setting/clearing
Â  const cookieOptions = {
Â  Â  httpOnly: true,
Â  Â  secure: isProduction,
Â  Â  // FIX: Use "None" (capital N) for production cross-site cookies
Â  Â  sameSite: isProduction ? "None" : "lax", 
Â  Â  path: "/",
Â  };


Â  if (!token) {
Â  Â  return res.status(401).json({
Â  Â  Â  success: false,
Â  Â  Â  message: "No refresh token provided"
Â  Â  });
Â  }

Â  try {
Â  Â  const decoded = jwt.verify(token, process.env.REFRESH_TOKEN_SECRET);

Â  Â  // Verify user still exists
Â  Â  const user = await User.findById(decoded.userId);
Â  Â  if (!user) {
Â  Â  Â  // Clear cookie if user is invalid (must use consistent attributes)
Â  Â  Â  res.clearCookie("refreshToken", cookieOptions); 
Â  Â  Â  return res.status(401).json({
Â  Â  Â  Â  success: false,
Â  Â  Â  Â  message: "User not found"
Â  Â  Â  });
Â  Â  }

Â  Â  const newAccessToken = signAccessToken(decoded.userId);
Â  Â  const newRefreshToken = signRefreshToken(decoded.userId);

Â  Â  // Set new refresh token (use base options and add maxAge)
Â  Â  res.cookie("refreshToken", newRefreshToken, {
Â  Â  Â  ...cookieOptions,
Â  Â  Â  maxAge: 7 * 24 * 60 * 60 * 1000,
Â  Â  });

Â  Â  res.json({
Â  Â  Â  success: true,
Â  Â  Â  accessToken: newAccessToken
Â  Â  });
Â  } catch (error) {
Â  Â  // Clear invalid cookie (must use consistent attributes)
Â  Â  res.clearCookie("refreshToken", cookieOptions); 

Â  Â  res.status(401).json({
Â  Â  Â  success: false,
Â  Â  Â  message: "Invalid refresh token"
Â  Â  });
Â  }
});

// ðŸ”¹ Logout
export const logout = asyncHandler(async (req, res) => {
Â  const isProduction = process.env.NODE_ENV === "production";

Â  // Define cookie options for consistency in clearing
Â  const cookieOptions = {
Â  Â  httpOnly: true,
Â  Â  secure: isProduction,
Â  Â  // FIX: Use "None" (capital N) for production cross-site cookies
Â  Â  sameSite: isProduction ? "None" : "lax", 
Â  Â  path: "/",
Â  };

Â  res.clearCookie("refreshToken", cookieOptions); 

Â  res.json({
Â  Â  success: true,
Â  Â  message: "Logged out successfully"
Â  });
});

// ðŸ”¹ Get Profile (No changes needed)
export const getProfile = asyncHandler(async (req, res) => {
Â  const user = await User.findById(req.user).select("-password");
Â  if (!user) {
Â  Â  return res.status(404).json({
Â  Â  Â  success: false,
Â  Â  Â  message: "User not found"
Â  Â  });
Â  }

Â  res.json({
Â  Â  success: true,
Â  Â  user
Â  });
});